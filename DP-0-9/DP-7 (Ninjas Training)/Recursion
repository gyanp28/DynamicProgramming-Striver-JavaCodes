/* Time Complexity: O(3^n) 
Space Complexity: O(n)
leecode link: https://leetcode.com/problems/maximum-number-of-points-with-cost/ ( Somewhat similar)
Codestudio Link : https://www.codingninjas.com/studio/problems/ninja%E2%80%99s-training_3621003?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf&leftPanelTab=0
*/ 

public class Solution {
    public static int ninjaTraining(int n, int points[][]) {
        int ans=help(n-1,3,points);
        return ans;
    }

    public static int help(int day,int prev,int[][] arr){
        if(day==0){
            int maxval=0;
            for(int i=0;i<=2;i++){
                if(i!=prev){
                    maxval=Math.max(maxval,arr[0][i]);
                }
            }
            return maxval;
        }
        int maxval=0;
        for(int i=0;i<=2;i++){
            if(i!=prev){
                int prev_maxpoint=help(day-1,i,arr);// max point till previous day if we choose this activity today
                int curr_point=arr[day][i];//current choice
                int activity=prev_maxpoint+curr_point; // total point if we choose this activity today
                maxval=Math.max(maxval,activity); // max point till today out of prev max and current activity
            }
        }
        return maxval;
        
    }

}