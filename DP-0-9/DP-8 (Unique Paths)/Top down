/* Time Complexity: O(m*n)
Space Complexity: O(m*n)
*/


class Solution {
    public int uniquePaths(int m, int n) {
        int dp[][]=new int[m][n];
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                dp[i][j]=-1;
            }
        }
        int grid[][]=new int[m][n];
        return help(0,0,m-1,n-1,grid,dp);
    }

    public int help(int i,int j,int m,int n,int grid[][],int[][] dp){
        if(i==m && j==n){
            return 1;
        }

        if(dp[i][j] != -1){
            return dp[i][j];
        }

        //do all stuffs 
        int bottom=0;
        if(i<m){
            bottom=help(i+1,j,m,n,grid,dp);
        }
        int right=0;
        if(j<n){
            right=help(i,j+1,m,n,grid,dp);
        }

        dp[i][j]=bottom+right;
        return dp[i][j];
    }
}
