import java.util.Arrays;

public class Solution {
    public static int minSubsetSumDifference(int []arr, int n) {
        int totalsum=0;
        for(int i=0;i<n;i++){
            totalsum+=arr[i];
        }

        int dp[][]=new int[1001][totalsum+1];
        for(int[] row:dp){
            Arrays.fill(row,-1);
        }
        int ans=help(0,0,totalsum,arr,dp); // Initialize ans here
        return ans;
    }

    public static int help(int i,int sum,int totalsum,int[] arr,int[][] dp){
        //base case
        if(i==arr.length){
            int s2=totalsum-sum;
            int diff=Math.abs(sum-s2);
            return diff; // Return the difference directly
        }

        if(dp[i][sum]!=-1){
            return dp[i][sum];
        }

        //do all stuffs
        int chooseCurrent = help(i+1, sum+arr[i], totalsum, arr, dp);
        int skipCurrent = help(i+1, sum, totalsum, arr, dp);
        int mindiff = Math.min(chooseCurrent, skipCurrent);
        
        return dp[i][sum]=mindiff;
    }
}
