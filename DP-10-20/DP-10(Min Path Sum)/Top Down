class Solution {
    public int minPathSum(int[][] grid) {
        int [][] dp=new int[grid.length][grid[0].length];
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[0].length;j++){
                dp[i][j]=-1;
            }
        }
        return help(0,0,grid,dp);
    }

    public int help(int i,int j,int[][] grid,int[][] dp){
        int m=grid.length;
        int n=grid[0].length;
        if(i==m-1 && j==n-1){
            return grid[m-1][n-1];
        }

        if(dp[i][j] != -1){
            return dp[i][j];
        }

        int bottom=Integer.MAX_VALUE;
        if(i<m-1){
            bottom=help(i+1,j,grid,dp)+grid[i][j];
        }

        int right=Integer.MAX_VALUE;
        if(j<n-1){
            right=help(i,j+1,grid,dp)+grid[i][j];
        }
        return dp[i][j]=Math.min(bottom,right);
    }

}