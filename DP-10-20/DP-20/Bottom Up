//The problem in this question was to find the invalid case we were returning Int.MAX_VALUE but when we add 1 to it in pick cases the value exceeds the int range and we get garbage value as ans..an example of such test case is [2,5,10,1] and amount=10

class Solution {
    public int coinChange(int[] coins, int amount) {
        int dp[][]=new int[coins.length][amount+1];
        int ans=solve(amount,coins,dp);
        if(ans>=100000){
            return -1;
        }
        return ans;
    }


    public int solve(int target,int arr[],int[][]dp){
//imp since the loop is running for target so everywhere instead of target we use i
        for(int i=0;i<=target;i++){
            if(i%arr[0]==0){  
                dp[0][i]=i/arr[0];
            }
            else{
                dp[0][i]=100000;
            }
        }

        for(int i=1;i<arr.length;i++){
            for(int j=0;j<=target;j++){
                int nonpick=0+dp[i-1][j];
                int pick=100000;
                if(arr[i]<=j){
                    pick=1+dp[i][j-arr[i]];
                }
                dp[i][j]=Math.min(pick,nonpick);
            }
        }
        return dp[arr.length-1][target];
    }
}