/* Time Complexity: O(n)
Space Complexity: O(n)
*/

public class Solution {
    public static int ninjaTraining(int n, int points[][]) {
        int[][] dp=new int[n][4];
        for (int i = 0; i < dp.length; i++) {
            for (int j = 0; j < dp[i].length; j++) {
                dp[i][j] = -1;
            }
        }

        int ans=help(n-1,3,points,dp);
        return ans;
    }

    public static int help(int day,int prev,int[][] arr,int[][] dp){
        if(day==0){
            int maxval=0;
            for(int i=0;i<=2;i++){
                if(i!=prev){
                    maxval=Math.max(maxval,arr[0][i]);
                }
            }
            return maxval;
        }
        if(dp[day][prev]!=-1){
            return dp[day][prev];
        }
        
        int maxval=0;
        for(int i=0;i<=2;i++){
            if(i!=prev){
                int prev_maxpoint=help(day-1,i,arr,dp); //agar ye choose krte hai to aage kya hoga (ye choose krne pe max value )
                int curr_point=arr[day][i];//current choice
                int activity=prev_maxpoint+curr_point; //
                maxval=Math.max(maxval,activity);
            }
        }
        dp[day][prev]=maxval;
        return dp[day][prev];
        
    }

}