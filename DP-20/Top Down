//The problem in this question was to find the invalid case we were returning Int.MAX_VALUE but when we add 1 to it in pick cases the value exceeds the int range and we get garbage value as ans..an example of such test case is [2,5,10,1] and amount=10

class Solution {
    public int coinChange(int[] coins, int amount) {
        int dp[][]=new int[coins.length][amount+1];
        for(int[] row : dp){
            Arrays.fill(row,-1);
        }
        int ans=help(coins.length-1,amount,coins,dp);
        if(ans>=10000000){
            return -1;
        }
        return ans;
    }

    public int help(int i,int target,int arr[],int[][] dp){
        if(i==0){
            if(target%arr[0]==0){
                return target/arr[0];
            }
            return 10000000;
        }
        if(dp[i][target]!=-1){
            return dp[i][target];
        }

        //all stuffs
        int notpick=0+help(i-1,target,arr,dp);
        int pick=10000000;
        if(arr[i]<=target){
            pick=1+help(i,target-arr[i],arr,dp);
        }
        return dp[i][target]=Math.min(pick,notpick);
    }
}