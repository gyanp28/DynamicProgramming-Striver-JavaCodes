/* Time Complexity: O(2^(m+n)) 
Space Complexity: O(m+n) 
Leetcode: 62. Unique Paths https://leetcode.com/problems/unique-paths/
CodeStudio : https://www.codingninjas.com/studio/problems/unique-paths_1081470?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf&leftPanelTab=0
*/

class Solution {
    public int uniquePaths(int m, int n) {
        int grid[][]=new int[m][n];
        return help(0,0,m-1,n-1,grid);
    }

    public int help(int i,int j,int m,int n,int grid[][]){
        if(i==m && j==n){
            return 1;
        }

        //do all stuffs 
        int bottom=0;
        if(i<m){
            bottom=help(i+1,j,m,n,grid);
        }
        int right=0;
        if(j<n){
            right=help(i,j+1,m,n,grid);
        }

        return bottom+right;
    }
}