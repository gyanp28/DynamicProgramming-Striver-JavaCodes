class Solution {
    public int longestCommonSubsequence(String s1, String s2) {
        int dp[][]=new int[s1.length()+1][s2.length()+1];
        for(int[]row : dp){
            Arrays.fill(row,-1);
        }
        return help(s1.length()-1,s2.length()-1,s1,s2,dp);        
    }

    public int help(int i,int j,String s1,String s2,int[][] dp){
        //base case
        if(i<0 || j<0){
            return 0;
        }
        if(dp[i][j]!=-1){
            return dp[i][j];
        }
        //all cases  //either match or notmatch and then 2 further calls into nonmatch out of which return max
        if(s1.charAt(i)==s2.charAt(j)){
            int match=help(i-1,j-1,s1,s2,dp);
            return 1+match;
        }
        else{
            int notmatchleft=help(i-1,j,s1,s2,dp);
            int notmatchright=help(i,j-1,s1,s2,dp);
            return dp[i][j]=0+ Math.max(notmatchleft,notmatchright);
        }
    }
}