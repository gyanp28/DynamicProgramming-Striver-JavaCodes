
class Solution {
    public int change(int amount, int[] coins) {
        int n = coins.length;
        int[][] dp = new int[n + 1][amount + 1];

        // Base case: If the target amount is 0, there's one way to make the change (by not picking any coin).
        for (int i = 0; i <= n; i++) {
            dp[i][0] = 1;
        }

        for (int i = 1; i <= n; i++) {
            for (int target = 1; target <= amount; target++) {
                // Not picking the current coin.
                dp[i][target] = dp[i - 1][target];
                
                // If the current coin can be used to make change for the current target amount.
                if (coins[i - 1] <= target) {
                    // Add the ways to make the remaining change using the current coin and not using the current coin.
                    dp[i][target] += dp[i][target - coins[i - 1]];
                }
            }
        }

        return dp[n][amount];
    }
}